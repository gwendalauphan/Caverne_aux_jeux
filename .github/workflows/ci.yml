name: CI

on:
  push:
    branches: [main]
  pull_request:
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'                          # <-- enable pip cache
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install xvfb
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends xvfb

      - name: Run main.py (test run)
        run: |
          if timeout 15s xvfb-run -a python app/main.py 2>&1 | grep -q "The client app is running"; then
            echo "Client output OK"
          else
            echo "Client output missing"
            exit 1
          fi
          if timeout 15s xvfb-run -a python app/Reseau/server.py 2>&1 | grep -q "Server is listening on port 8000"; then
            echo "Server output OK"
          else
            echo "Server output missing"
            exit 1
          fi


  build-linux-debug:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
      # Uses prebuilt CPython; enables pip cache keyed to requirements.txt
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install system packages (make, patchelf, tk, etc.)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            make patchelf tk

      - name: Clean dist directory
        run: rm -rf dist && mkdir -p dist

      - name: Build executables (Linux debug)
        run: make build-linux-debug

      - name: List artifacts (debug)
        run: ls -lah dist || true

      - name: Upload Linux executables
        uses: actions/upload-artifact@v4
        with:
          name: caverne-aux-jeux-linux-debug
          path: |
            dist/main
            dist/server
          if-no-files-found: error


  build-windows-debug:
    if: github.event_name == 'pull_request'
    runs-on: windows-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install GNU Make
        run: choco install make --no-progress -y

      - name: Clean dist directory
        shell: pwsh
        run: |
          if (Test-Path dist) { Remove-Item dist -Recurse -Force }
          New-Item -ItemType Directory -Path dist | Out-Null

      - name: Build executables (Windows)
        shell: bash
        run: make build-windows-debug

      - name: List artifacts (debug)
        shell: pwsh
        run: Get-ChildItem -Recurse dist | Format-List

      - name: Upload Windows executables
        uses: actions/upload-artifact@v4
        with:
          name: caverne-aux-jeux-windows-debug
          path: |
            dist/main.exe
            dist/server.exe
          if-no-files-found: error


  test-exec-linux-debug:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [build-linux-debug]
    steps:
      - uses: actions/checkout@v3
      - name: Download Linux executables
        uses: actions/download-artifact@v4
        with:
          name: caverne-aux-jeux-linux-debug
          path: dist

      - name: Verify files exist
        run: |
          if [ ! -f dist/main ]; then
            echo "dist/main not found"
            exit 1
          fi
          if [ ! -f dist/server ]; then
            echo "dist/server not found"
            exit 1
          fi

      - name: Make executables runnable
        run: chmod +x dist/main dist/server

      - name: Install xvfb
        run: sudo apt update && sudo apt install -y xvfb

      - name: Test Linux client executable
        run: |
          if timeout 15s xvfb-run -a ./dist/main 2>&1 | grep -q "The client app is running"; then
            echo "Client output OK"
          else
            echo "Client output missing"
            exit 1
          fi

      - name: Test Linux server executable
        run: |
          if timeout 15s xvfb-run -a ./dist/server 2>&1 | grep -q "Server is listening on port 8000"; then
            echo "Server output OK"
          else
            echo "Server output missing"
            exit 1
          fi


  test-exec-windows-debug:
    if: github.event_name == 'pull_request'
    runs-on: windows-latest
    needs: [build-windows-debug]
    steps:
      - uses: actions/checkout@v3
      - name: Download Windows executables
        uses: actions/download-artifact@v4
        with:
          name: caverne-aux-jeux-windows-debug
          path: dist
          
      - name: Verify files exist
        shell: pwsh
        run: |
          if (!(Test-Path "dist/main.exe"))   { throw "dist/main.exe not found" }
          if (!(Test-Path "dist/server.exe")) { throw "dist/server.exe not found" }

      - name: Test Windows client executable (redirect + timeout)
        shell: pwsh
        run: |
          Remove-Item -ErrorAction SilentlyContinue client.out.log, client.err.log
          $p = Start-Process -FilePath ".\dist\main.exe" -NoNewWindow `
              -RedirectStandardOutput client.out.log -RedirectStandardError client.err.log -PassThru
          Start-Sleep -Seconds 15
          if (-not $p.HasExited) { Stop-Process -Id $p.Id -Force }
          if (Select-String -Path @("client.out.log","client.err.log") -Pattern 'The client app is running' -Quiet) {
            Write-Host "Client output OK"
          } else {
            Write-Host "Client output missing"
            Get-ChildItem *.log | ForEach-Object {
              Write-Host "----- $($_.Name) -----"
              Get-Content $_.FullName -ErrorAction SilentlyContinue
            }
            exit 1
          }

      - name: Test Windows server executable (redirect + timeout)
        shell: pwsh
        run: |
          Remove-Item -ErrorAction SilentlyContinue server.out.log, server.err.log
          $p = Start-Process -FilePath ".\dist\server.exe" -NoNewWindow `
              -RedirectStandardOutput server.out.log -RedirectStandardError server.err.log -PassThru
          Start-Sleep -Seconds 15
          if (-not $p.HasExited) { Stop-Process -Id $p.Id -Force }
          if (Select-String -Path @("server.out.log","server.err.log") -Pattern 'Server is listening on port 8000' -Quiet) {
            Write-Host "Server output OK"
          } else {
            Write-Host "Server output missing"
            Get-ChildItem *.log | ForEach-Object {
              Write-Host "----- $($_.Name) -----"
              Get-Content $_.FullName -ErrorAction SilentlyContinue
            }
            exit 1
          }


  build-linux:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
      # Uses prebuilt CPython; enables pip cache keyed to requirements.txt
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install system packages (make, patchelf, tk, etc.)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            make patchelf tk

      - name: Clean dist directory
        run: rm -rf dist && mkdir -p dist

      - name: Build executables (Linux)
        run: make build-linux

      - name: List artifacts
        run: ls -lah dist || true

      - name: Upload Linux executables
        uses: actions/upload-artifact@v4
        with:
          name: caverne-aux-jeux-linux
          path: |
            dist/main
            dist/server
          if-no-files-found: error


  build-windows:
    if: github.event_name == 'release'
    runs-on: windows-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install GNU Make
        run: choco install make --no-progress -y

      - name: Clean dist directory
        shell: pwsh
        run: |
          if (Test-Path dist) { Remove-Item dist -Recurse -Force }
          New-Item -ItemType Directory -Path dist | Out-Null

      - name: Build executables (Windows)
        shell: bash
        run: make build-windows

      - name: List artifacts
        shell: pwsh
        run: Get-ChildItem -Recurse dist | Format-List

      - name: Upload Windows executables
        uses: actions/upload-artifact@v4
        with:
          name: caverne-aux-jeux-windows
          path: |
            dist/main.exe
            dist/server.exe
          if-no-files-found: error


  release-artifacts:
    if: github.event_name == 'release'
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: caverne-aux-jeux-linux
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: caverne-aux-jeux-windows
          path: dist

      - name: Download Windows executables
        run: |
          mkdir -p dist/windows
          mv dist/main.exe dist/windows/
          mv dist/server.exe dist/windows/
      - name: Download Linux executables
        run: |
          mkdir -p dist/linux
          mv dist/main dist/linux/
          mv dist/server dist/linux/
      - name: Copy user guide to dist folders
        run: |
          cp docs/user_guide.pdf dist/linux/
          cp docs/user_guide.pdf dist/windows/
      - name: Zip Linux release
        run: |
          zip -j "caverne-aux-jeux-linux-${{ github.event.release.name }}.zip" dist/linux/*
      - name: Zip Windows release
        run: |
          zip -j "caverne-aux-jeux-windows-${{ github.event.release.name }}.zip" dist/windows/*
      - name: Upload release assets (zips only)
        uses: softprops/action-gh-release@v1
        with:
          files: |
            caverne-aux-jeux-linux-${{ github.event.release.name }}.zip
            caverne-aux-jeux-windows-${{ github.event.release.name }}.zip


  delete-artifacts-linux:
    if: success()
    runs-on: ubuntu-latest
    needs: [test-exec-linux-debug]
    steps:
      - name: Delete artifacts from this run (linux)
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            caverne-aux-jeux-linux-debug
          failOnError: false

  delete-artifacts-windows:
    if: success()
    runs-on: windows-latest
    needs: [test-exec-windows-debug]
    steps:
      - name: Delete artifacts from this run (windows)
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            caverne-aux-jeux-windows-debug
          failOnError: false
