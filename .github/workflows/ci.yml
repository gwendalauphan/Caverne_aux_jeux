name: CI

on:
  push:
    branches: [main]
  pull_request:
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'                          # <-- enable pip cache
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install xvfb
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends xvfb

      - name: Run main.py (test run)
        run: |
          if timeout 5s stdbuf -oL xvfb-run -a python app/main.py 2>&1 | grep -q "The client app is running"; then
            echo "Client output OK"
          else
            echo "Client output missing"
            exit 1
          fi
          if timeout 5s stdbuf -oL python app/Reseau/server.py 2>&1 | grep -q "Server is listening on port 8000"; then
            echo "Server output OK"
          else
            echo "Server output missing"
            exit 1
          fi


  build-linux-debug:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
      # Uses prebuilt CPython; enables pip cache keyed to requirements.txt
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install system packages (make, patchelf, tk, etc.)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            make patchelf tk

      - name: Clean dist directory
        run: rm -rf dist && mkdir -p dist

      - name: Build executables (Linux debug)
        run: make build-linux-debug

      - name: List artifacts (debug)
        run: ls -lah dist || true

      - name: Upload Linux executables
        uses: actions/upload-artifact@v4
        with:
          name: caverne-aux-jeux-linux
          path: |
            dist/main
            dist/server
          if-no-files-found: error


  build-windows-debug:
    if: github.event_name == 'pull_request'
    runs-on: windows-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install GNU Make
        run: choco install make --no-progress -y

      - name: Clean dist directory
        shell: pwsh
        run: |
          if (Test-Path dist) { Remove-Item dist -Recurse -Force }
          New-Item -ItemType Directory -Path dist | Out-Null

      - name: Build executables (Windows)
        shell: bash
        run: make build-windows-debug

      - name: List artifacts (debug)
        shell: pwsh
        run: Get-ChildItem -Recurse dist | Format-List

      - name: Upload Windows executables
        uses: actions/upload-artifact@v4
        with:
          name: caverne-aux-jeux-windows
          path: |
            dist/main.exe
            dist/server.exe
          if-no-files-found: error


  test-exec-linux-debug:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [build-linux-debug]
    steps:
      - uses: actions/checkout@v3
      - name: Download Linux executables
        uses: actions/download-artifact@v4
        with:
          name: caverne-aux-jeux-linux
          path: dist
      - name: Make executables runnable
        run: chmod +x dist/main dist/server
      - name: Install xvfb
        run: sudo apt update && sudo apt install -y xvfb
      - name: Test Linux client executable
        run: |
          if timeout 5s stdbuf -oL xvfb-run -a ./dist/main  2>&1 | grep -q "The client app is running"; then
            echo "Client output OK"
          else
            echo "Client output missing"
            exit 1
          fi
      - name: Test Linux server executable
        run: |
          if timeout 5s stdbuf -oL ./dist/server  2>&1 | grep -q "Server is listening on port 8000"; then
            echo "Server output OK"
          else
            echo "Server output missing"
            exit 1
          fi

  test-exec-windows-debug:
    if: github.event_name == 'pull_request'
    runs-on: windows-latest
    needs: [build-windows-debug]
    steps:
      - uses: actions/checkout@v3
      - name: Download Windows executables
        uses: actions/download-artifact@v4
        with:
          name: caverne-aux-jeux-windows
          path: dist
      - name: Test Windows client executable
        run: |
          ./dist/main.exe | findstr /C:"The client app is running"
      - name: Test Windows server executable
        run: |
          ./dist/server.exe | findstr /C:"Server is listening on port 8000"



  release-artifacts:
    if: github.event_name == 'release'
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: caverne-aux-jeux-linux
          path: ./linux
      - uses: actions/download-artifact@v4
        with:
          name: caverne-aux-jeux-windows
          path: ./windows
      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./dist/main
            ./dist/server
            ./dist/main.exe
            ./dist/server.exe
